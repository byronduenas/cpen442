# from operator import itemgetter
#
cipher_text = "VFHZOKLMYBATENHRLMQYHZMRFBVCAGEQETSLNEPWTOGRTPHZQZQEGNMRFBVCAGEQYBMYHNQYHZUWGRYBETNYRNNGPQGWIPVTESKLATENVUQNXKKTQZLRPGYPBFGNGAETRYHFSNCYQSUFXKYRNFQHYGLDRHRYKLRONEGNTNUQQNXKVGFCFBHMPZGLSMEQBFQSUFXKGANHHCPYRDQNXKCEPXKQXRUVOSMUCLNHGBEQABQHQYNXKTOSXENLYRGAETNEBKYHGSQOBFQYMHXPECQSUFXKGRVTHGBFQSUFXKMYHETNLSMRIEBZYRNFBFNGCLCRBENSFKHYLMETHDEUTFNEQYHXSNXNPZSIQNXKGVZQKSYINFSNRZQNXKHWETKQIRKTYTQHPWOCWCNEQSUFXKETSMLTEXWSNGRNQSUFXKKTIFZHNLXRHNNQPCTOPWYRDBYUNSXNTNHNKSSPQHYAYQGBKYBRQSUFXKTPBRQHGNLVQONRNGOSXVKYXRBNHBQHYSRVVHCLQKNHCMDHEGRYQSUFXKUFFOGSECQSUFXKZGLVBFVGXKGWOWKTTPYWXPDFLMRETNAGPYRDQNXKHPLNBZYBNRLCATHZTOLSGSHWRTCLIRPZHETPHZAGAWBHVTBFQSUFXKGAWDVCAZGPRQRDQNXKNGYBMRSQURLWBFQYERLMTNCUTVFKYHFENSWNCLYRGAKTCYURTUHCBFUEQNETNHGMQNQSUFXKYHBPQHOTGNPWTOYBPWEQPWFKXRVZRVQLRCYGTBNQUYWIBRECGNVGWHVGGVLDTOQSUFXKQSREQHFRCBSGFBNQHEQSUFXKGSQOQHZGZGQHGAETNENRYRXBDRLSWECLMYGWGSFHVCQSUFXKCWEQNHGRKTFYNEENHRLMQYHZLRPGOHTFBFQSUFXKMYHCROAGRQRDQNXKNGKYTUNSXPXPEQUEQNQKNYEDSMYBMYHNZLGNQOWIILGNENECGNETBEVZRYVTSMEQPWFQCLLIBGBFKQETQHYAXRLRSQPNNFZLTETPBRKTKQMRDRZETPETHFKTENZEYKSNNSMLRNYMETHDTVNUYCGNKQKSSWRETFNHGUGVZQKSYINFSNEZGNYHRGYRHYRUCWCUQNXKCLTFNRSNTBLSEMSNOSXRLNBPTBXPEQKTOFSNBFGNSWIZRCXKYWSOGSQOBFWVQYETCLOVQHBABHVTBFDBGWGSHWLRKTIFGTLDRETNWDHNIWLTRZQNXKKTIECLBDRYFHHNCRKONRKTCYTPQYFHZFQYHXTNRTRYKLBNQSUFXKPWCSLQDRXPLRGKVCBFGNFOGSECOSRVXPEQQSUFXKSWIZRCQYHZHNCMCHBDSMHUKTZFQYHZXKYWSOYGKTDRCYZQHFBGGVETCLHWEBQYRGTNXPGUGRVTQHYLEHPZLTAGTNBZQSUFXKCMZHTBLVPGTBLRHFVGQSUFXKTNHSQKYAGSEQNTPZHTKTLZTOQYMHTNEVVZVQQNXKVFEANRTBETETNEBKYHTNVCIWUMQHYTVCISSLBFVEDHWYOSRTCLUHCLEZGNGATNHESMIRQSUFXKXKYWSOVWETCLTPEQQHNGPWCVYKRYQSUFXKHWETCEHFPXKTQIQNXKKTIBVGYRQZAGGSTONGKSYINFSNRZQNXKHPLNHYQZRXLWEMNSREYMPWCVBFBDRYQSUFXKTFKXQHQHLZRZGSYRGOQYHXTPHZLCENOWQSUFXKFOGSECQSUFXKHPCLBHHNQFPGMYDFGNKTZETNQSHNCEGZQKCEGZQKTNVTRGEHQHYZGNYSYQQSUFXKGVZQKSYINFSNEZGNTNCEHFSMETCLXPEQKTQIQNABHNZETNYHTOETYCGNSWIZRCXKYWSOXKFBKTQHKSSWREVTOFSKNFNREXSNBXTVZRQLKQXBYRQSEQQSUFXKZHYRNFBFTNTFBHZRBFNGHNDRCPRBSGFBNQHELUKTQZRNUZTPTOBESNPWLSMHQYATETTYRYRXHNXPORGNWQGUYRFYSBSGFBNQHEQSUFXKHPSLTFBDRYHWFBRNQFPGZIQLRCGOQYAZCPBDSMFOXPEQQSUFXKSWIZRCFOXPEQLSFNYMETNETHQKYLHQZTYTHNZFQYHZTPBRLZBREOSMOSRVIWYBHESDQNXKSWIZRCQSUFXKCLETGAKQENKQXSEWSNOSFVXRWPBPNRGNZIBFETGAOSXVEQOSRVXBWQGOYRNFYHGUGRTPRTBABLYMGPENHPGACLZHBKSMNXLBHNYRRQHDEOSMHTQNNETPEZCLLIVZRYOSRUQNXKSWIZRCKQETQHOTGNPWTOQSUFXKFOGSECCRIRIWRYQSUFXKSWIZRCETRYYMRALQDRYRNFBFNGPWGULSRNBRTKXENHETRDVRHYNQXRTWTPCYNGAWBHQFSKQHYZGNQKNYHEMLYMETHFZDVTCYKBHNGOHNVHRYYRZBLRFCFBTVGRTNPWGULCTOSTHFGSFCNHLSFNETQHLTTBBSQSWSFYNTTBECLGZQQHZGUVSLGRTNWYGMSNYBRNGATETNAGPYBFGNETNTXSRYTKBNNFNHYTZESQIWFKLGLMGOWVKSYINFSNRGIRPZECGNZHNSYRQSUFXKYRNFQHYGDBEQYHGULGSDQNXKKTQIKXNESNRYAGUVSLCSSGFBNQHEGULRSMYINHLCRGRNQVETNEPWQVRNGULSXBXKROETZLPWRGBDRYQSUFXKHWETETHDVSNHHZZVGLIWRGMYHVWVWICUQNXKMRPYQHPQTO"
# print "Number of characters: " + str(len(cipher_text))
# alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
#
# pair = []
# pairs = {}
#
# for c in alphabet:
#     print c +  ": " + str(cipher_text.count(c))
#
# #groups of 2
#
# threes = {}
#
# for (index,c) in enumerate(cipher_text):
#     if len(pair) == 2:
#         pair_text = "".join(pair)
#         pairs.setdefault(pair_text, 0)
#         pairs[pair_text] += 1
#         pair = []
#     pair.append(c)
#
# #groups of 4 next part
#
# first_pair = []
# second_pair = []
# #
# # for (index,c) in enumerate(cipher_text):
# #     if len(second_pair) == 4:
# #         pair_text = "".join(second_pair)
# #         pairs.setdefault(pair_text, 0)
# #         pairs[pair_text] += 1
# #         second_pair = []
# #     if len(first_pair) == 4:
# #         pair_text = "".join(first_pair)
# #         pairs.setdefault(pair_text, 0)
# #         pairs[pair_text] += 1
# #         first_pair = []
# #     first_pair.append(c)
# #     if index >= 2:
# #         second_pair.append(c)
#
# # first_pair = []
# # second_pair = []
# # third_pair = []
# #
# # for (index,c) in enumerate(cipher_text):
# #     if len(third_pair) == 6:
# #         pair_text = "".join(third_pair)
# #         pairs.setdefault(pair_text, 0)
# #         pairs[pair_text] += 1
# #         third_pair = []
# #     if len(second_pair) == 6:
# #         pair_text = "".join(second_pair)
# #         pairs.setdefault(pair_text, 0)
# #         pairs[pair_text] += 1
# #         second_pair = []
# #     if len(first_pair) == 6:
# #         pair_text = "".join(first_pair)
# #         pairs.setdefault(pair_text, 0)
# #         pairs[pair_text] += 1
# #         first_pair = []
# #     first_pair.append(c)
# #     if index >= 2:
# #         second_pair.append(c)
# #     if index >= 4:
# #         third_pair.append(c)
#
# # first_pair = []
# # second_pair = []
# # third_pair = []
# # fourth_pair = []
# #
# # for (index,c) in enumerate(cipher_text):
# #     if len(third_pair) == 8:
# #         pair_text = "".join(fourth_pair)
# #         pairs.setdefault(pair_text, 0)
# #         pairs[pair_text] += 1
# #         fourth_pair = []
# #     if len(third_pair) == 8:
# #         pair_text = "".join(third_pair)
# #         pairs.setdefault(pair_text, 0)
# #         pairs[pair_text] += 1
# #         third_pair = []
# #     if len(second_pair) == 8:
# #         pair_text = "".join(second_pair)
# #         pairs.setdefault(pair_text, 0)
# #         pairs[pair_text] += 1
# #         second_pair = []
# #     if len(first_pair) == 8:
# #         pair_text = "".join(first_pair)
# #         pairs.setdefault(pair_text, 0)
# #         pairs[pair_text] += 1
# #         first_pair = []
# #     first_pair.append(c)
# #     if index >= 2:
# #         second_pair.append(c)
# #     if index >= 4:
# #         third_pair.append(c)
# #     if index >= 6:
# #         fourth_pair.append(c)
#
# sorted_pairs = sorted(pairs.items(), key=itemgetter(1), reverse=True)
# # sorted_pairs = sorted(threes.items(), key=itemgetter(1), reverse=True)
#
# #printing logic
#
# strings = []
#
# for key,value in sorted_pairs:
#     string = key + ": " + str(value)
#     strings.append(string)
#
# print ", ".join(strings)
#
# plain_text = cipher_text.lower()
#
# cipher = {}
# # cipher["XK"] = "TH"
# # cipher["QS"] = "ER"
# # cipher["ET"] = "ON"
#
# for key,value in cipher.items():
#     plain_text = plain_text.replace(key.lower(), value)
#
# print plain_text
#
#

cipher_text = "VFHZOKLMYBATENHRLMQYHZMRFBVCAGEQETSLNEPWTOGRTPHZQZQEGNMRFBVCAGEQYBMYHNQYHZUWGRYBETNYRNNGPQGWIPVTESKLATENVUQNXKKTQZLRPGYPBFGNGAETRYHFSNCYQSUFXKYRNFQHYGLDRHRYKLRONEGNTNUQQNXKVGFCFBHMPZGLSMEQBFQSUFXKGANHHCPYRDQNXKCEPXKQXRUVOSMUCLNHGBEQABQHQYNXKTOSXENLYRGAETNEBKYHGSQOBFQYMHXPECQSUFXKGRVTHGBFQSUFXKMYHETNLSMRIEBZYRNFBFNGCLCRBENSFKHYLMETHDEUTFNEQYHXSNXNPZSIQNXKGVZQKSYINFSNRZQNXKHWETKQIRKTYTQHPWOCWCNEQSUFXKETSMLTEXWSNGRNQSUFXKKTIFZHNLXRHNNQPCTOPWYRDBYUNSXNTNHNKSSPQHYAYQGBKYBRQSUFXKTPBRQHGNLVQONRNGOSXVKYXRBNHBQHYSRVVHCLQKNHCMDHEGRYQSUFXKUFFOGSECQSUFXKZGLVBFVGXKGWOWKTTPYWXPDFLMRETNAGPYRDQNXKHPLNBZYBNRLCATHZTOLSGSHWRTCLIRPZHETPHZAGAWBHVTBFQSUFXKGAWDVCAZGPRQRDQNXKNGYBMRSQURLWBFQYERLMTNCUTVFKYHFENSWNCLYRGAKTCYURTUHCBFUEQNETNHGMQNQSUFXKYHBPQHOTGNPWTOYBPWEQPWFKXRVZRVQLRCYGTBNQUYWIBRECGNVGWHVGGVLDTOQSUFXKQSREQHFRCBSGFBNQHEQSUFXKGSQOQHZGZGQHGAETNENRYRXBDRLSWECLMYGWGSFHVCQSUFXKCWEQNHGRKTFYNEENHRLMQYHZLRPGOHTFBFQSUFXKMYHCROAGRQRDQNXKNGKYTUNSXPXPEQUEQNQKNYEDSMYBMYHNZLGNQOWIILGNENECGNETBEVZRYVTSMEQPWFQCLLIBGBFKQETQHYAXRLRSQPNNFZLTETPBRKTKQMRDRZETPETHFKTENZEYKSNNSMLRNYMETHDTVNUYCGNKQKSSWRETFNHGUGVZQKSYINFSNEZGNYHRGYRHYRUCWCUQNXKCLTFNRSNTBLSEMSNOSXRLNBPTBXPEQKTOFSNBFGNSWIZRCXKYWSOGSQOBFWVQYETCLOVQHBABHVTBFDBGWGSHWLRKTIFGTLDRETNWDHNIWLTRZQNXKKTIECLBDRYFHHNCRKONRKTCYTPQYFHZFQYHXTNRTRYKLBNQSUFXKPWCSLQDRXPLRGKVCBFGNFOGSECOSRVXPEQQSUFXKSWIZRCQYHZHNCMCHBDSMHUKTZFQYHZXKYWSOYGKTDRCYZQHFBGGVETCLHWEBQYRGTNXPGUGRVTQHYLEHPZLTAGTNBZQSUFXKCMZHTBLVPGTBLRHFVGQSUFXKTNHSQKYAGSEQNTPZHTKTLZTOQYMHTNEVVZVQQNXKVFEANRTBETETNEBKYHTNVCIWUMQHYTVCISSLBFVEDHWYOSRTCLUHCLEZGNGATNHESMIRQSUFXKXKYWSOVWETCLTPEQQHNGPWCVYKRYQSUFXKHWETCEHFPXKTQIQNXKKTIBVGYRQZAGGSTONGKSYINFSNRZQNXKHPLNHYQZRXLWEMNSREYMPWCVBFBDRYQSUFXKTFKXQHQHLZRZGSYRGOQYHXTPHZLCENOWQSUFXKFOGSECQSUFXKHPCLBHHNQFPGMYDFGNKTZETNQSHNCEGZQKCEGZQKTNVTRGEHQHYZGNYSYQQSUFXKGVZQKSYINFSNEZGNTNCEHFSMETCLXPEQKTQIQNABHNZETNYHTOETYCGNSWIZRCXKYWSOXKFBKTQHKSSWREVTOFSKNFNREXSNBXTVZRQLKQXBYRQSEQQSUFXKZHYRNFBFTNTFBHZRBFNGHNDRCPRBSGFBNQHELUKTQZRNUZTPTOBESNPWLSMHQYATETTYRYRXHNXPORGNWQGUYRFYSBSGFBNQHEQSUFXKHPSLTFBDRYHWFBRNQFPGZIQLRCGOQYAZCPBDSMFOXPEQQSUFXKSWIZRCFOXPEQLSFNYMETNETHQKYLHQZTYTHNZFQYHZTPBRLZBREOSMOSRVIWYBHESDQNXKSWIZRCQSUFXKCLETGAKQENKQXSEWSNOSFVXRWPBPNRGNZIBFETGAOSXVEQOSRVXBWQGOYRNFYHGUGRTPRTBABLYMGPENHPGACLZHBKSMNXLBHNYRRQHDEOSMHTQNNETPEZCLLIVZRYOSRUQNXKSWIZRCKQETQHOTGNPWTOQSUFXKFOGSECCRIRIWRYQSUFXKSWIZRCETRYYMRALQDRYRNFBFNGPWGULSRNBRTKXENHETRDVRHYNQXRTWTPCYNGAWBHQFSKQHYZGNQKNYHEMLYMETHFZDVTCYKBHNGOHNVHRYYRZBLRFCFBTVGRTNPWGULCTOSTHFGSFCNHLSFNETQHLTTBBSQSWSFYNTTBECLGZQQHZGUVSLGRTNWYGMSNYBRNGATETNAGPYBFGNETNTXSRYTKBNNFNHYTZESQIWFKLGLMGOWVKSYINFSNRGIRPZECGNZHNSYRQSUFXKYRNFQHYGDBEQYHGULGSDQNXKKTQIKXNESNRYAGUVSLCSSGFBNQHEGULRSMYINHLCRGRNQVETNEPWQVRNGULSXBXKROETZLPWRGBDRYQSUFXKHWETETHDVSNHHZZVGLIWRGMYHVWVWICUQNXKMRPYQHPQTO"

key = "NUYDFRBIZMHPSAWTXGOKECLQV"

digraph = []

def same_row(index1, index2):
    return int(index1/5) == int(index2/5)

def same_col(index1, index2):
    return int(index1%5) == int(index2%5)

result = []

for c in cipher_text:
    digraph.append(c)
    if len(digraph) == 2:
        first_letter = digraph[0]
        second_letter = digraph[1]
        first_index = key.index(first_letter)
        second_index = key.index(second_letter)
        first_row = int(first_index/5)
        second_row = int(second_index/5)
        first_column = int(first_index%5)
        second_column = int(second_index%5)
        if first_row == second_row:
            if first_column == 0:
                result.append(key[first_index + 4])
                result.append(key[second_index - 1])
            elif second_column == 0:
                result.append(key[first_index - 1])
                result.append(key[second_index + 4])
            else:
                result.append(key[first_index - 1])
                result.append(key[second_index - 1])
        elif first_column == second_column:
            if first_row == 0:
                result.append(key[first_index + 20])
                result.append(key[second_index - 5])
            elif second_row == 0:
                result.append(key[first_index - 5])
                result.append(key[second_index + 20])
            else:
                result.append(key[first_index - 5])
                result.append(key[second_index - 5])
        else:
            result.append(key[5*first_row + second_column])
            result.append(key[5*second_row + first_column])
        digraph = []

print "".join(result)